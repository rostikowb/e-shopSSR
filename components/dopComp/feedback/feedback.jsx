import React, {useState, useEffect} from "react";
import s from "./feedback.module.css";
import {connect} from "react-redux";
import {changeStateFeedbackModal} from "../../../redux/modal/actions";
import {TextField, Button} from "@material-ui/core";
import Select from "react-select";
import {sendTicket} from "../../../redux/tickets/action";
import {Modal} from "../modal/modal";
import ss from "../modal/modal.module.css"
import closedIcon from "../filtersChecked/cancel.svg";
import {useRouter} from "next/router";

const optionsTemaRU = [
  {
    value: "simple",
    label: "–Ø –ø—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç—å ¬©",
  },
  {
    value: "products",
    label: "–ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ–≤–∞—Ä–æ–º(-–∞–º–∏)",
  },
  {
    value: "bug",
    label: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã",
  },
  {
    value: "coop",
    label: "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞",
  },
  {
    value: "wishes",
    label: "–ü–æ–∂–µ–ª–∞–Ω–∏—è",
  },
  {
    value: "another",
    label: "–î—Ä—É–≥–æ–µ",
  },
];
const optionsTemaUA = [
  {
    value: "simple",
    label: "–Ø –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Ç–∞—Ç–∏ ¬©",
  },
  {
    value: "products",
    label: "–ü—Ä–æ–±–ª–µ–º–∏ —Å —Ç–æ–≤–∞—Ä–æ–º(-–∞–º–∏)",
  },
  {
    value: "bug",
    label: "–¢–µ—Ö–Ω–∏—á–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è",
  },
  {
    value: "coop",
    label: "–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ",
  },
  {
    value: "wishes",
    label: "–ü–æ–±–∞–∂–∞–Ω–Ω—è",
  },
  {
    value: "another",
    label: "–Ü–Ω—à–µ",
  },
];

const optionsSredsRU = [
  {
    value: "email",
    label: "–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã",
  },
  {
    value: "tel",
    label: "–ú–æ–±. –¢–µ–ª–µ—Ñ–æ–Ω–∞",
  },
  {
    value: "telegram",
    label: "–¢–µ–ª–µ–≥—Ä–∞–º–º–∞",
  },
];

const optionsSredsUA = [
  {
    value: "email",
    label: "–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏",
  },
  {
    value: "tel",
    label: "–ú–æ–±. –¢–µ–ª–µ—Ñ–æ–Ω–∞",
  },
  {
    value: "telegram",
    label: "–¢–µ–ª–µ–≥—Ä–∞–º–∞",
  },
];
const validateEmail = (email) => {
  let pattern = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  return pattern.test(email);
};

export const Feedbac = (props) => {
  const UD = props.UD;
  const locale = useRouter().locale;
  const [done, setDone] = useState(false);
  const [data, setData] = useState({
    question: "simple",
    comm: "email",
    msg: "",
    email: UD?.email || "",
    tel: UD?.tel || Number("+380"),
    telegram: "",
  });
  const [dataV, setDataV] = useState({
    question: !!data?.question,
    comm: !!data?.comm,
    msg: !!data?.msg,
    email: !!data?.email,
    tel: data?.tel.length > 3,
    telegram: data?.telegram.length > 2,
  });

  const sendData = () => {
    props.sendTicket(data, props.token);
  };

  const chengSel = (type, value) => {
    dataV["email"] = false;
    dataV["tel"] = false;
    dataV["telegram"] = false;
    dataV[type] = true;
    data[type] = value;
    setData({...data});
    setDataV({...dataV});
  };

  const chngInpLn = (type, value, lng) => {
    let isValid;
    if (type === "email") {
      isValid = validateEmail(value);
    } else {
      isValid = value.length > lng;
    }
    dataV[type] = isValid;
    data[type] = value;
    setData({...data});
    setDataV({...dataV});
  };

  useEffect(() => {
    if (data.comm === "tel") {
      dataV["email"] = true;
      dataV["telegram"] = true;
    }
    if (data.comm === "email") {
      dataV["tel"] = true;
      dataV["telegram"] = true;
    }
    if (data.comm === "telegram") {
      dataV["email"] = true;
      dataV["tel"] = true;
    }

    setDataV({...dataV});
    setDone(
      dataV.question &&
      dataV.comm &&
      dataV.msg &&
      dataV.email &&
      dataV.tel &&
      dataV.telegram
    );
  }, [data]);

  const option = {
    changeState: props.changeStateFeedbackModal,
    title: locale === 'ru' ? "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å" : "–ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤—è–∑–æ–∫"
  }

  const style = {
    wrapper: {
      width: "50vw",
      top: '9%',
      left: '25%',
      height: '61vh'
    },
    top: {
      margin: '0 15px'
    }
  }

  if (props.doneMsg && locale === "ru") return <Modal options={option} style={style}><span className={s.doneMsg}>–¢–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –° –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è! üòâ</span></Modal>
  if (props.doneMsg && locale === "ua") return <Modal options={option} style={style}><span className={s.doneMsg}>–¢—ñ–∫–µ—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ. –ó –≤–∞–º–∏ —Å–∫–æ—Ä–æ –∑–≤—è–∂—É—Ç—å—Å—è! üòâ</span></Modal>

  return (
    <>
      <div
        onClick={() => props.changeStateFeedbackModal()}
        className={ss.modalShadow}
      />
      <div className={s.modalWrapper}>
        <div className={s.modal_feedback}>
          <div className={`${ss.topPc} ${s.title}`}>
            <span>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</span>
            <img className={ss.clsIconBtn} onClick={() => props.changeStateFeedbackModal(false)} src={closedIcon}
                 alt=""/>
          </div>
          <div className={ss.topMobi}>
            <span className={ss.title}>{locale === 'ru' ? "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å" : "–ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤—è–∑–æ–∫"}</span>
          </div>
          <div className={s.feedbackBox}>
            <div className={s.feedbackBlock}>
              <span
                className={s.feedbackTitle}>{locale === 'ru' ? "–¢–µ–º–∞ –º–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è" : "–¢–µ–º–∞ –º–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"}: </span>{" "}
              <Select
                defaultValue={locale === "ru" ? optionsTemaRU[0] : optionsTemaUA[0]}
                options={locale === "ru" ? optionsTemaRU : optionsTemaUA}
                onChange={(e) => chengSel("question", e.value)}
                name="tema"
                className={s.cuponSelect}
              />
            </div>
            <div className={s.feedbackBlock}>
              <span className={s.feedbackTitle}>
                {locale === 'ru' ? "–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º" : "–ó–≤—è–∂—ñ—Ç—å—Å—è –∑—ñ –º–Ω–æ—ó –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é"}:
              </span>
              <Select
                defaultValue={locale === "ru" ? optionsSredsRU[0] : optionsSredsUA[0]}
                options={locale === "ru" ? optionsSredsRU : optionsSredsUA}
                onChange={(e) => chengSel("comm", e.value)}
                name="sreds"
                className={s.cuponSelect}
              />
            </div>
            <div className={`${s.feedbackBlock} ${s.TextField}`}>
              <TextField
                style={{margin: 0}}
                multiline={true}
                variant="outlined"
                // color={"secondary"}
                margin="normal"
                required={true}
                fullWidth
                id="msg"
                label={locale === 'ru' ? '–ò–∑–ª–æ–∂–∏—Ç–µ —Å—é–¥–∞ —Å—É—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è' : '–í–∏–∫–ª–∞–¥—ñ—Ç—å —Å—é–¥–∏ —Å—É—Ç—å –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è'}
                autoComplete="msg"
                name="msg"
                type="text"
                rows={5}
                rowsMax={8}
                error={!dataV.msg}
                helperText={locale === 'ru' ? "–ï—Å–ª–∏ –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç–µ –∑–≤–æ–Ω–æ–∫, –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ç—É—Ç –≤—Ä–µ–º—è, –Ω–æ –Ω–µ —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ —á–∞—Å" : "–Ø–∫—â–æ –∑–∞–º–æ–≤–ª—è—î—Ç–µ –¥–∑–≤—ñ–Ω–æ–∫, –º–æ–∂–µ—Ç–µ –≤–∫–∞–∑–∞—Ç–∏ —Ç—É—Ç —á–∞—Å, –∞–ª–µ –Ω–µ —Ä–∞–Ω—ñ—à–µ –Ω—ñ–∂ —á–µ—Ä–µ–∑ –≥–æ–¥–∏–Ω—É"}
                onChange={(event) => chngInpLn("msg", event.target.value, 4)}
              />
            </div>
            {props.errMsg ? (
              <span className={s.errMsg}>{props.errMsg}</span>
            ) : null}
            <div className={`${s.feedbackBlock} ${s.feedbackBlockBtn}`}>
              <TextField
                style={{width: "40%", margin: 0}}
                variant="outlined"
                margin="normal"
                required={true}
                fullWidth
                id={data.comm}
                label={
                  data.comm === "tel"
                    ? "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
                    : data.comm === "telegram" ? locale === 'ru' ? "–õ–æ–≥–∏–Ω –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ" : "–õ–æ–≥—ñ–Ω –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º—ñ"
                    : "email"
                }
                name={data.comm}
                autoComplete={data.comm}
                type={
                  data.comm === "tel"
                    ? "number"
                    : data.comm === "telegram"
                    ? "text"
                    : data.comm
                }
                value={data[data.comm]}
                error={!dataV[data.comm]}
                onChange={(event) =>
                  chngInpLn(
                    data.comm,
                    event.target.value,
                    data.comm === "tel" ? 10 : 3
                  )
                }
                helperText={!dataV[data.comm] ? locale === 'ru' ? "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ" : "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–≤–µ–¥–µ–Ω–µ" : null}
              />
              <div className={s.sendBtn}>
                <Button
                  type="submit"
                  fullWidth
                  variant="contained"
                  color="primary"
                  disabled={!done || props.stub}
                  onClick={() => sendData()}
                >
                  {locale === "ru" ? "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" : "–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏"}
                </Button>
              </div>

            </div>
          </div>
          <div className={`${ss.bottom} ${ss.bottomIsDopChild} ${s.bottom}`}>
            <div className={s.sendBtnM}>
              <Button
                type="submit"
                fullWidth
                variant="contained"
                color="primary"
                disabled={!done || props.stub}
                onClick={() => sendData()}
              >
                {locale === "ru" ? "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" : "–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏"}
              </Button>
            </div>
            <div className={ss.closeBtn} onClick={() => props.changeStateFeedbackModal(false)}>–ó–ê–ö–†–´–¢–¨</div>
          </div>

        </div>
      </div>
    </>)
};

const mapStateToProps = (state) => {
  return {
    UD: state.auth.userData,
    token: state.auth.token,
    stub: state.ticket.stub,
    doneMsg: state.ticket.doneMsg,
    errMsg: state.ticket.errMsg,
  };
};

export const Feedback = connect(mapStateToProps, {
  changeStateFeedbackModal,
  sendTicket,
})(Feedbac);
